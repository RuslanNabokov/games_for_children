// src/pages/BoardGame/PuzzleStage.tsx
import React, { useState, useMemo, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { puzzles } from './puzzlesData';
import '../../boardGame.css';

interface Answers {
  [key: number]: string[]; // –∏–Ω–¥–µ–∫—Å –≤–æ–ø—Ä–æ—Å–∞ ‚Üí –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
}

export default function PuzzleStage() {
  /* --------------------------------------------------
   * 1. –ü–ê–†–ê–ú–ï–¢–†–´ –†–û–£–¢–ê –ò –ü–û–î–ì–û–¢–û–í–ö–ê –î–ê–ù–ù–´–•
   * -------------------------------------------------- */
  const { stageId } = useParams<{ stageId: string }>();
  const stageIndex  = Number(stageId || 1);
  const stage       = puzzles.find(p => p.id === stageIndex);
  const nav         = useNavigate();

  /* --------------------------------------------------
   * 2. –•–£–ö–ò STATE / EFFECT (–≤—Å–µ–≥–¥–∞ –≤—ã–∑—ã–≤–∞—é—Ç—Å—è!)
   * -------------------------------------------------- */
  const [answers,  setAnswers]  = useState<Answers>({});
  const [finished, setFinished] = useState(false);

  // –ü—Ä–∏ —Å–º–µ–Ω–µ —ç—Ç–∞–ø–∞ –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  useEffect(() => {
    setAnswers({});
    setFinished(false);
  }, [stageIndex]);

  /* --------------------------------------------------
   * 3. –†–ê–ù–ù–Ø–Ø –ü–†–û–í–ï–†–ö–ê –ù–ê–õ–ò–ß–ò–Ø –î–ê–ù–ù–´–• (–¥–æ–ø—É—Å—Ç–∏–º–æ –æ–¥–∏–Ω —Ä–∞–∑)
   * -------------------------------------------------- */
  if (!stage) return <p>–≠—Ç–∞–ø –Ω–µ –Ω–∞–π–¥–µ–Ω.</p>;

  /* --------------------------------------------------
   * 4. –õ–û–ö–ê–õ–¨–ù–ê–Ø –ö–û–ù–°–¢–ê–ù–¢–ê –° –≠–ú–û–î–ó–ò
   * -------------------------------------------------- */
  const emojiMap: Record<string, string> = {
    '–ë–µ–ª–∫–∞': 'üêøÔ∏è',  '–ú–µ–¥–≤–µ–¥—å': 'üêª',  '–ó–∞—è—Ü': 'üêá',   '–õ–∏—Å–∞': 'ü¶ä',
    '–£—Ç–∫–∞': 'ü¶Ü',   '–†—ã–±–∞': 'üêü',    '–ë–æ–±—Ä': 'ü¶´',   '–£–¥–æ—á–∫–∞': 'üé£',
    '–ö–Ω–∏–≥–∞': 'üìö',  '–ù–æ–∂': 'üî™'
  };

  /* --------------------------------------------------
   * 5. –§–£–ù–ö–¶–ò–ò –î–õ–Ø –û–ë–ù–û–í–õ–ï–ù–ò–Ø –û–¢–í–ï–¢–û–í
   * -------------------------------------------------- */
  const handleOptionChange = (qIdx: number, value: string, multiple: boolean) => {
    setAnswers(prev => {
      const current = prev[qIdx] || [];
      const updated = multiple
        ? current.includes(value)
          ? current.filter(x => x !== value)
          : [...current, value]
        : [value];
      return { ...prev, [qIdx]: updated };
    });
  };

  /* --------------------------------------------------
   * 6. –ü–†–û–í–ï–†–ö–ê –ö–û–†–†–ï–ö–¢–ù–û–°–¢–ò –≠–¢–ê–ü–ê (–≤—Å–µ–≥–¥–∞ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è!)
   * -------------------------------------------------- */
  const isStageCorrect = useMemo(() => {
    return stage.questions.every((q, idx) => {
      const ans = answers[idx] || [];
      if (q.type === 'mcq') {
        return ans.slice().sort().join() === [...q.correct].sort().join();
      }
      if (q.type === 'guess') {
        return (ans[0] || '').trim().toLowerCase() === q.answer.toLowerCase();
      }
      return false;
    });
  }, [answers, stage.questions]);

  /* --------------------------------------------------
   * 7. –ó–ê–í–ï–†–®–ï–ù–ò–ï/–ü–ï–†–ï–•–û–î –ú–ï–ñ–î–£ –≠–¢–ê–ü–ê–ú–ò
   * -------------------------------------------------- */
  const handleComplete = () => {
    if (!isStageCorrect) {
      alert('–û—Ç–≤–µ—Ç –Ω–µ–≤–µ—Ä–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.');
      return;
    }
    const next = stageIndex + 1;
    if (next > puzzles.length) {
      setFinished(true);
    } else {
      nav(`/board-game/${next}`);
    }
  };

  /* --------------------------------------------------
   * 8. –ü–û–ú–û–©–¨: –æ—Ç–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –æ—Ç —ç–º–æ–¥–∑–∏
   * -------------------------------------------------- */
  const splitLabel = (opt: string) => {
    const parts      = opt.trim().split(' ');
    const maybeEmoji = parts[parts.length - 1];
    const isEmoji    = /\p{Extended_Pictographic}/u.test(maybeEmoji);
    const base       = isEmoji ? parts.slice(0, -1).join(' ') : opt;
    const emoji      = emojiMap[base] || (isEmoji ? maybeEmoji : '');
    return { base, emoji };
  };

  /* --------------------------------------------------
   * 9. –≠–ö–†–ê–ù –ü–û–ó–î–†–ê–í–õ–ï–ù–ò–Ø (–ø–æ—Å–ª–µ –≤—Å–µ—Ö —Ö—É–∫–æ–≤!)
   * -------------------------------------------------- */
  if (finished) {
    return (
      <div className="puzzle-complete p-8 text-center bg-green-50 rounded-xl shadow-lg">
        <h2 className="text-4xl font-bold mb-4">–ú–æ–ª–æ–¥–µ—Ü! üéâ</h2>
        <p className="text-lg mb-6">–¢—ã –ø—Ä–æ—à—ë–ª –≤—Å–µ —ç—Ç–∞–ø—ã –∏–≥—Ä—ã.</p>
        <button
          onClick={() => nav('/home')}
          className="px-6 py-3 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors"
        >
          –ù–∞ –≥–ª–∞–≤–Ω—É—é
        </button>
      </div>
    );
  }

  /* --------------------------------------------------
   * 10. –û–°–ù–û–í–ù–û–ô –†–ï–ù–î–ï–† –≠–¢–ê–ü–ê
   * -------------------------------------------------- */
  return (
    <div className="puzzle-stage">
      <h2 className="text-3xl font-bold mb-8">
        –≠—Ç–∞–ø {stage.id}: {stage.title}
      </h2>

      <div className="questions-wrapper">
        {stage.questions.map((q, i) => (
          <div key={i} className="question p-6 bg-white rounded-xl shadow-lg">
            {Array.isArray(q.images)
              ? q.images.map(src => (
                  <img key={src} src={src} alt="—Ä–µ–±—É—Å" className="mb-4 w-full max-w-xs mx-auto" />
                ))
              : q.images && (
                  <img src={q.images} alt="—Ä–µ–±—É—Å" className="mb-4 w-full max-w-xs mx-auto" />
                )}
            <p className="mb-4 text-lg font-medium">{q.prompt}</p>


            {/* MCQ */}
            {q.type === 'mcq' && (
              <div className="mt-4 flex flex-wrap gap-4">
                {q.options.map(opt => {
                  const { base, emoji } = splitLabel(opt);
                  const selected  = answers[i]?.includes(opt);
                  const isCorrect = q.correct.includes(opt);
                  const btnClass  = selected
                    ? isCorrect ? 'border-green-600 bg-green-100' : 'border-red-600 bg-red-100'
                    : 'border-gray-300 hover:bg-gray-100';
                  return (
                    <button
                      key={opt}
                      onClick={() => handleOptionChange(i, opt, q.correct.length > 1)}
                      className={`px-6 py-3 rounded-lg border-2 focus:outline-none transition-colors text-lg ${btnClass}`}
                    >
                      {base}{emoji && <span className="ml-2 text-xl">{emoji}</span>}
                    </button>
                  );
                })}
              </div>
            )}

            {/* GUESS */}
            {q.type === 'guess' && (() => {
              const value       = answers[i]?.[0] || '';
              const correctFull = q.answer.toLowerCase();
              const prefixValid = correctFull.startsWith(value.toLowerCase());
              const inputClass  = value === ''
                ? 'border-gray-300'
                : prefixValid
                  ? value.toLowerCase() === correctFull
                    ? 'border-green-600 bg-green-100'
                    : 'border-green-500'
                  : 'border-red-600 bg-red-100';
              return (
                <input
                  type="text"
                  placeholder={q.placeholder || ''}
                  value={value}
                  onChange={e => handleOptionChange(i, e.target.value, false)}
                  className={`mt-4 border-2 rounded-lg px-4 py-2 w-full text-lg focus:outline-none transition-colors ${inputClass}`}
                />
              );
            })()}
          </div>
        ))}
      </div>

      <button
        className="btn-next mt-10 px-8 py-3 text-xl"
        onClick={handleComplete}
        disabled={!isStageCorrect}
      >
        {stage.id < puzzles.length ? '–°–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø' : '–ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É'}
      </button>
    </div>
  );
}
